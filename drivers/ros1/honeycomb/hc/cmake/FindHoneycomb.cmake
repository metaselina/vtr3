# CMake script for finding Honeycomb API.
#
# Input variables:
#
# - Honeycomb_FIND_QUIETLY: do not print and message
#
# - Honeycomb_ROOT_DIR (optional): When specified, header files and libraries
#   will be searched for in
#     ${Honeycomb_ROOT_DIR}/include
#     ${Honeycomb_ROOT_DIR}/lib
#
#   respectively, and the default CMake search order will be ignored. When
#   unspecified, the default CMake search order is used. This variable can be
#   specified either as a CMake or environment variable. If both are set,
#   preference is given to the CMake variable.
#   Use this variable for finding packages installed in a nonstandard location,
#   or for enforcing that one of multiple package installations is picked up.
#
# Output variables:
#
# - Honeycomb_FOUND: Boolean that indicates if the package was found
# - Honeycomb_INCLUDE_DIRS: Paths to the necessary header files
# - Honeycomb_LIBRARIES: Package libraries
#
#
# Example usage:
#
#  find_package(Honeycomb)
#  if(NOT Honeycomb_FOUND)
#    # Error handling
#  endif()
#  ...
#  include_directories(${Honeycomb_INCLUDE_DIRS} ...)
#  ...
#  target_link_libraries(my_target ${Honeycomb_LIBRARIES})

# Get package location hint from environment variable (if any)
if(NOT Honeycomb_ROOT_DIR AND DEFINED ENV{Honeycomb_ROOT_DIR})
  set(Honeycomb_ROOT_DIR "$ENV{Honeycomb_ROOT_DIR}" CACHE PATH
      "Honeycomb base directory location (optional, used for nonstandard installation paths)")
endif()

# Search path for nonstandard package locations
if(Honeycomb_ROOT_DIR)
  set(Honeycomb_INCLUDE_PATH PATHS "${Honeycomb_ROOT_DIR}/include" NO_DEFAULT_PATH)
  set(Honeycomb_LIBRARY_PATH PATHS "${Honeycomb_ROOT_DIR}/lib" NO_DEFAULT_PATH)
else()
  set(ADJACENT_DIR "../honeycomb")
  set(Honeycomb_INCLUDE_PATH PATHS "${ADJACENT_DIR}/include" NO_DEFAULT_PATH)
  set(Honeycomb_LIBRARY_PATH PATHS "${ADJACENT_DIR}/lib" NO_DEFAULT_PATH)
endif()

# Find headers and libraries
find_path(Honeycomb_INCLUDE_DIR NAMES honeycomb/honeycomb.h PATH_SUFFIXES ${Honeycomb_INCLUDE_PATH})
find_library(Honeycomb_LIBRARY NAMES honeycomb_c_api PATH_SUFFIXES ${Honeycomb_LIBRARY_PATH})

# Output variables generation
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(HONEYCOMB DEFAULT_MSG
                                  Honeycomb_INCLUDE_DIR Honeycomb_LIBRARY)

mark_as_advanced(Honeycomb_INCLUDE_DIR
                 Honeycomb_LIBRARY)

set(Honeycomb_FOUND ${HONEYCOMB_FOUND}) # Enforce case-correctness: Set appropriately cased variable...
unset(HONEYCOMB_FOUND) # ...and unset uppercase variable generated by find_package_handle_standard_args

# Print message about outcome
if (Honeycomb_FOUND)
  if (NOT Honeycomb_FIND_QUIETLY)
      message (STATUS "Honeycomb include = ${Honeycomb_INCLUDE_DIR}")
      message (STATUS "Honeycomb library = ${Honeycomb_LIBRARY}")
  endif ()
else ()
  message (STATUS "Honeycomb API lib not found."
    " Please set Honeycomb_ROOT_DIR for custom path "
    "or make sure it is installed in a standard location like /usr, /usr/local."
  )
endif()
