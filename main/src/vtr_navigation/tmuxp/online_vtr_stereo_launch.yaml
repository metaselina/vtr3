# The tmux session name, has to be unique
session_name: online_vtr_stereo

# environment:
#   PRIORITIZE: nice -n -5 ionice -c 2 -n 1

# Can run a script before tmuxp starts building the session
# before_script: /my/startup/script
shell_command_before:
  - "source ${VTRVENV}/bin/activate"
  - "source ${VTRSRC}/main/install/setup.bash"

# The default start directory for the full session, ./ is this file's location
start_directory: ${VTRDATA}

# Add commands to bash history
suppress_history: false

# This is where we list all the stuff we want to run
windows:
  - window_name: vtr_main
    layout: main-horizontal
    panes:
      - ros2 launch vtr_navigation vtr_stereo.launch.py scenario_params:=playback.yaml data_dir:=${VTRDATA}/online-test-$(date '+%F') clear_data_dir:=true
      - ros2 run vtr_mission_planning vtr_mission.py --help # backup way to send commands if UI not working
      - echo "backup terminal"

  - window_name: ui
    layout: main-horizontal
    panes:
      - ros2 run vtr_interface socket_server.py  --ros-args -r __ns:=/vtr
      - sleep 2 && ros2 run vtr_interface socket_client_node.py  --ros-args -r __ns:=/vtr # wait for the socket_server to be created
      - sleep 3 && ros2 run vtr_interface ui_server.py  --ros-args -r __ns:=/vtr # the UI server has to wait for socket_client_node
      - sleep 4 && firefox --new-window "localhost:5200" # the webpage has to wait for ui server

  - window_name: ros_monitor
    layout: main-horizontal
    panes:
      - ros2 launch vtr_safety_monitor safety_monitor.launch.py  scenario_params:=default_online.yaml
      - ssh administrator@192.168.131.1 # && rostopic echo /mcu/status  				# to monitor Grizzly battery voltage while testing
      - watch -n 1 rostopic list
      - ssh -t administrator@192.168.131.1 "sudo /home/administrator/catkin_ws/src/serial_bridge/scripts/serial_bridge.py /dev/ttyUSB0 -b 57600 -d enp1s0" # sends RTK info from radio to serial

  - window_name: grizzly
    layout: main-horizontal
    panes:
      - ros2 launch vtr_grizzly grizzly_utias_description.launch.py # to get vehicle/sensor transforms
      - ros2 launch asrl__grizzly wired-grizzly_xbox_js0.launch # XBox controller for manually driving
      - sleep 5 && ros2 topic echo /grizzly_velocity_controller/cmd_vel # monitor velocity commands
      -  # ssh -t administrator@192.168.131.1 "source ~/ros2_crystal/install/setup.bash && ros2 run ros1_bridge static_bridge_grizzly"             # run ROS1/ROS2 bridge on Grizzly

  - window_name: calibration
    layout: main-horizontal
    panes:
      - ros2 run vtr_sensors BumblebeeDriver --ros-args --params-file ${VTRSRC}/main/src/vtr_sensors/param/XB3.yaml
      - stress -c 1 # workaround for super weird XB3 Driver bug
      # - ros2 run vtr_sensors BumblebeeRecorder ${VTRDATA}/$(date '+%s') front_xb3                  # optional to record full stereo stream
