// Copyright 2021, Autonomous Space Robotics Lab (ASRL)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * \file scale_error_eval.hpp
 * \brief
 * \details
 *
 * \author Michael Warren, Autonomous Space Robotics Lab (ASRL)
 */
#pragma once

#include <steam.hpp>
#include <steam/problem/NoiseModel.hpp>

namespace vtr {
namespace steam_extensions {

//////////////////////////////////////////////////////////////////////////////////////////////
/// @brief Scale error Jacobian
//////////////////////////////////////////////////////////////////////////////////////////////
Eigen::Matrix<double, 1, 6> scaleJacobian(const Eigen::Matrix<double, 6, 1> d);

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Scale error function evaluator
//////////////////////////////////////////////////////////////////////////////////////////////
class ScaleErrorEval : public steam::ErrorEvaluatorX {
 public:
  /// Convenience typedefs
  typedef boost::shared_ptr<ScaleErrorEval> Ptr;
  typedef boost::shared_ptr<const ScaleErrorEval> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor - error is difference between 'T' and identity (in Lie
  /// algebra space)
  //////////////////////////////////////////////////////////////////////////////////////////////
  ScaleErrorEval(double inmeas,
                 const steam::se3::TransformEvaluator::ConstPtr& T);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns whether or not an evaluator contains unlocked state
  /// variables
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool isActive() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Evaluate the 1-d measurement error
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::VectorXd evaluate() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Evaluate the 6-d measurement error and Jacobians
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::VectorXd evaluate(const Eigen::MatrixXd& lhs,
                                   std::vector<steam::Jacobian<> >* jacs) const;

 private:
  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Measurement coordinates extracted from images (u v)
  //////////////////////////////////////////////////////////////////////////////////////////////
  double meas_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Error evaluator
  //////////////////////////////////////////////////////////////////////////////////////////////
  steam::se3::LogMapEvaluator::ConstPtr errorEvaluator_;
};

}  // namespace steam_extensions
}  // namespace vtr
