//////////////////////////////////////////////////////////////////////////////////////////////
/// \file range_conditioning_eval.h
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_RANGE_CONDITIONING_EVALUATOR_HPP
#define STEAM_RANGE_CONDITIONING_EVALUATOR_HPP

#include <steam/evaluator/ErrorEvaluator.hpp>
#include <steam/state/LandmarkStateVar.hpp>

namespace vtr {
namespace steam_extensions {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief
//////////////////////////////////////////////////////////////////////////////////////////////
class RangeConditioningEval : public steam::ErrorEvaluator<1, 3>::type {
 public:
  /// Convenience typedefs
  typedef boost::shared_ptr<RangeConditioningEval> Ptr;
  typedef boost::shared_ptr<const RangeConditioningEval> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  RangeConditioningEval(const steam::se3::LandmarkStateVar::ConstPtr& landmark);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns whether or not an evaluator contains unlocked state
  /// variables
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool isActive() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::Matrix<double, 1, 1> evaluate() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::Matrix<double, 1, 1> evaluate(
      const Eigen::Matrix<double, 1, 1>& lhs,
      std::vector<steam::Jacobian<1, 3> >* jacs) const;

 private:
  Eigen::Matrix<double, 1, 1> meas_;

  steam::se3::LandmarkStateVar::ConstPtr landmark_;
};

}  // namespace steam_extensions
}  // namespace vtr

#endif  // STEAM_RANGE_CONDITIONING_EVALUATOR_HPP
